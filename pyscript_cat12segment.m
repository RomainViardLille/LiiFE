fprintf(1,'Executing %s at %s:\n',mfilename(),datestr(now));
fprintf(1,'Executing %s at %s:\n',mfilename(),datestr(now));
ver,
try,
        %% Generated by nipype.interfaces.spm
        if isempty(which('spm')),
             throw(MException('SPMCheck:NotFound', 'SPM not in matlab path'));
        end
        [name, version] = spm('ver');
        fprintf('SPM version: %s Release: %s\n',name, version);
        fprintf('SPM path: %s\n', which('spm'));
        spm('Defaults','fMRI');

        if strcmp(name, 'SPM8') || strcmp(name(1:5), 'SPM12'),
           spm_jobman('initcfg');
           spm_get_defaults('cmdline', 1);
        end

        jobs{1}.spm.basetype.basename.data = {...
'/NAS/dumbo/protocoles/HAMSI/data_NIFTI/1.3.51.0.1.1.10.49.10.222.5982019.5982373/T1.nii,1';...
};
jobs{1}.spm.basetype.basename.nproc = 1;
jobs{1}.spm.basetype.basename.opts.affreg = 'mni';
jobs{1}.spm.basetype.basename.opts.biasacc = 0.5;
jobs{1}.spm.basetype.basename.extopts.APP = 1070;
jobs{1}.spm.basetype.basename.extopts.spm_kamap = 0;
jobs{1}.spm.basetype.basename.extopts.LASstr = 0.5;
jobs{1}.spm.basetype.basename.extopts.gcutstr = 2;
jobs{1}.spm.basetype.basename.extopts.WMHC = 1;
jobs{1}.spm.basetype.basename.extopts.vox = 1.5;
jobs{1}.spm.basetype.basename.extopts.restypes.optimal(1) = 1;
jobs{1}.spm.basetype.basename.extopts.restypes.optimal(2) = 0.1;
jobs{1}.spm.basetype.basename.extopts.ignoreErrors = 1;
jobs{1}.spm.basetype.basename.surface = 1;
jobs{1}.spm.basetype.basename.output.surf_measures = 1;
jobs{1}.spm.basetype.basename.output.ROImenu.atlases.neuromorphometrics = 1;
jobs{1}.spm.basetype.basename.output.ROImenu.atlases.lpba40 = 1;
jobs{1}.spm.basetype.basename.output.ROImenu.atlases.hammers = 1;
jobs{1}.spm.basetype.basename.output.ROImenu.atlases.cobra = 1;
jobs{1}.spm.basetype.basename.output.GM.native = 0;
jobs{1}.spm.basetype.basename.output.GM.mod = 1;
jobs{1}.spm.basetype.basename.output.GM.dartel = 0;
jobs{1}.spm.basetype.basename.output.WM.native = 0;
jobs{1}.spm.basetype.basename.output.WM.mod = 1;
jobs{1}.spm.basetype.basename.output.WM.dartel = 0;
jobs{1}.spm.basetype.basename.output.CSF.native = 0;
jobs{1}.spm.basetype.basename.output.CSF.mod = 1;
jobs{1}.spm.basetype.basename.output.CSF.dartel = 0;
jobs{1}.spm.basetype.basename.output.label.native = 0;
jobs{1}.spm.basetype.basename.output.label.warped = 1;
jobs{1}.spm.basetype.basename.output.label.dartel = 0;
jobs{1}.spm.basetype.basename.output.labelnative = 0;
jobs{1}.spm.basetype.basename.output.bias.warped = 1;
jobs{1}.spm.basetype.basename.output.las.native = 0;
jobs{1}.spm.basetype.basename.output.las.warped = 1;
jobs{1}.spm.basetype.basename.output.las.dartel = 0;
jobs{1}.spm.basetype.basename.output.jacobianwarped = 1;
jobs{1}.spm.basetype.basename.output.warps(1) = 1;
jobs{1}.spm.basetype.basename.output.warps(2) = 0;

        spm_jobman('run', jobs);

        
,catch ME,
fprintf(2,'MATLAB code threw an exception:\n');
fprintf(2,'%s\n',ME.message);
if length(ME.stack) ~= 0, fprintf(2,'File:%s\nName:%s\nLine:%d\n',ME.stack.file,ME.stack.name,ME.stack.line);, end;
end;